const readline = require('readline');
const fs = require('fs');
const TABLE = require('cli-table3');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

let playerName = '';
let playerScore = 0;
let bankScore = 0;

/**-----------------
 **     Colors
 *------------------ */
const RESET = '\x1b[0m';
const GREEN = '\x1b[32m';
const YELLOW = '\x1b[33m';
const RED = '\x1b[31m';
const BLUE = '\x1b[34m';


/**--------------
 * *    Tables
 *--------------*/
const displayTitleScreen = () => {
    const menuTable = new TABLE({
        head: ['Menu'],
        colWidths: [40],
        colAligns: ['center'],
        style: {
            head: ['blue'],
            border: ['grey'],
            compact: true
        }
    });

    menuTable.push(
        ['1. Play'],
        [' ------------------ '],
        ['l. Leaderboard'],
        ['r. Reset leaderboard'],
        ['q. Exit'],
    );

    const titleTable = new TABLE({
        head: ['BlackJack!'],
        colWidths: [60],
        colAligns: ['center'],
        style: {
            head: ['blue', 'bold'],
            border: ['yellow'],
            compact: true
        },
        chars: {
            'top': '═',
            'top-mid': '╤',
            'top-left': '╔',
            'top-right': '╗',
            'bottom': '═',
            'bottom-mid': '╧',
            'bottom-left': '╚',
            'bottom-right': '╝',
            'left': '║',
            'left-mid': '╟',
            'mid': '─',
            'mid-mid': '┼',
            'right': '║',
            'right-mid': '╢',
            'middle': '│'
        }
    });

    titleTable.push(
        ['Welcome to BlackJack! game in terminal.'],
        ['Get as close to 21 as you can without going over!\n'],
        ['Beat the Bank!'],
        ['\nGLHF!\n'],
        [menuTable.toString()]
    );

    console.log(titleTable.toString());
}

const leaderboardTable = (scores) => {
    const table = new TABLE({
        head: ['Name', 'Date', 'Winner', 'Player Score', 'Bank Score'],
        colWidths: [15, 25, 15, 15, 15],
        style: {
            head: ['green'],
            border: ['yellow'],
        }
    });

    scores.forEach(score => {
        table.push([
            score.name,
            score.date,
            score.winner,
            score.playerScore,
            score.bankScore
        ]);
    });
}

const goodbye = () => {
    const goodbyeTable = new TABLE({
        head: ['GOODBYE'],
        colWidths: [60],
        colAligns: ['center'],
        style: {
            head: ['red'],
            border: ['white'],
            compact: true
        }
    });

    goodbyeTable.push(
        ['\nThank you for playing!'],
        ['See you next time!\n']
    );

    console.log(goodbyeTable.toString());
}

/**--------------
 * *  Functions  
 * --------------*/
const displayMenu = () => {
    displayTitleScreen();
    rl.question('\nEnter your choice: ', (input) => {
        switch (input.toLowerCase()) {
            case '1':
                play();
                break;
            case 'l':
                displayLeaderboard();
                break;
            case 'r':
                resetLeaderboard();
                break;
            case 'q':
                console.clear();
                goodbye();
                rl.close();
                break;
            default:
                console.clear();
                console.log('\nInvalid choice. Please try again.\n');
                displayMenu();
        }
    });
}

const getRandomNumber = (min, max) => {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

const play = () => {
    console.clear();
    bankScore = getRandomNumber(16, 21);
    playerScore = getRandomNumber(1, 11);

    console.log(`\nPlayer: ${playerScore}`);

    gameLoop(playerScore, bankScore);
}

const gameLoop = (playerScore, bankScore) => {
    rl.question('\nDo you want another card? (y/n): ', (answer) => {
        switch (answer.toLowerCase()) {
            case (playerScore === 21 || bankScore === 21):
                console.log('\nBlackJack!\n');
                saveScore(playerScore, bankScore);
                retry();
                return;
            case 'y':
                const newCard = getRandomNumber(1, 11);
                playerScore += newCard;
                console.log(`\nYou got: ${newCard}`);
                console.log(`\nYour total: ${playerScore}\n`);
                if (playerScore > 21) {
                    console.log('\nYou busted! Bank wins.');
                    saveScore(playerScore, bankScore);
                    retry();
                } else {
                    gameLoop(playerScore, bankScore);
                }
                break;
            case 'n':
                console.log(`\nFinal Player Total: ${playerScore}`);
                console.log(`\nFinal Bank Total: ${bankScore}`);
                if (playerScore === bankScore) {
                    console.log('\nPush!\n');
                } else if (bankScore > 21 || playerScore > bankScore) {
                    console.log('\nPlayer wins!\n');
                    saveScore(playerScore, bankScore);
                } else {
                    console.log('\nBank wins!\n');
                    saveScore(playerScore, bankScore);
                }
                retry();
                break;
            default:
                console.log('\nInvalid choice. Please try again.');
                gameLoop(playerScore, bankScore);
        };
    });
}

const createJSON = () => {
    fs.writeFileSync('scores.json', JSON.stringify([]));
}

const saveScore = (playerScore, bankScore) => {
    if (!fs.existsSync('scores.json')) {
        createJSON();
    }

    let scores = JSON.parse(fs.readFileSync('scores.json'));

    const newScore = {
        name: playerName,
        date: new Date().toLocaleString(),
        winner: playerScore > bankScore ? 'Bank' : playerName,
        playerScore,
        bankScore
    };
    scores.push(newScore);
    fs.writeFileSync('scores.json', JSON.stringify(scores, null, 2));

    console.log('\nScore saved.');
    displayMenu();
}

const displayLeaderboard = () => {
    if (!fs.existsSync('scores.json') || fs.statSync('scores.json').size === 0) {
        console.log('\nNo leaderboard data available.\n');
        return displayMenu();
    }

    console.log("\n--- Leaderboard ---\n");

    let scores = JSON.parse(fs.readFileSync('scores.json'));

    scores.sort((a, b) => {
        if (a.name.toLowerCase() < b.name.toLowerCase()) return -1;
        if (a.name.toLowerCase() > b.name.toLowerCase()) return 1;
        return b.playerScore - a.playerScore;
    });

    leaderboardTable(scores);

    console.log('\nPress any key to return to the menu.');
    rl.question('', () => {
        console.clear();
        displayMenu();
    });
}

const resetLeaderboard = () => {
    rl.question('\nAre you sure you want to reset the leaderboard? (y/n): ', (answer) => {
        switch (answer.toLowerCase()) {
            case 'y':
                console.clear();
                fs.writeFileSync('scores.json', JSON.stringify([]));
                console.log('\nLeaderboard has been reset.\n');
                displayMenu();
                break;
            case 'n':
                console.clear();
                console.log('\nLeaderboard not reset.\n');
                displayMenu();
                break;
            default:
                console.log('\nInvalid choice. Please try again.\n');
                resetLeaderboard();
        }
    })
}

const retry = () => {
    rl.question('\nDo you want to play again? (y/n): ', (answer) => {
        switch (answer.toLowerCase()) {
            case 'y':
                play();
                break;
            case 'n':
                console.clear();
                goodbye();
                updateLeaderboard(); // Show leaderboard before exiting
                rl.close();
                break;
            default:
                console.log('\nInvalid choice. Please try again.');
                retry();
        }
    });
}

/**----------------
 * *     Main 
 * -----------------*/
const startGame = () => {
    console.clear();
    displayMenu();
}

startGame();
